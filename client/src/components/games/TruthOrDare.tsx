import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Users, MessageCircle, Zap } from "lucide-react";
import { telegramService } from "@/lib/telegram";
import { TruthOrDareItem } from "@/types/models";

interface TruthOrDareProps {
  sessionId: number;
  onComplete: (userScore: number, partnerScore: number) => void;
}

const truthQuestions: TruthOrDareItem[] = [
  {
    id: 'truth_1',
    type: 'truth',
    text: '–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –Ω–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª?',
    difficulty: 'medium'
  },
  {
    id: 'truth_2',
    type: 'truth',
    text: '–û —á—ë–º —Ç—ã –¥—É–º–∞–µ—à—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?',
    difficulty: 'easy'
  },
  {
    id: 'truth_3',
    type: 'truth',
    text: '–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –Ω–∞—à–µ–π –ø–∞—Ä–µ, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?',
    difficulty: 'hard'
  },
  {
    id: 'truth_4',
    type: 'truth',
    text: '–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –Ω–∞–º–∏ —Ç–µ–±–µ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
    difficulty: 'easy'
  },
  {
    id: 'truth_5',
    type: 'truth',
    text: '–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—É–≥–∞–µ—Ç –≤ –±—É–¥—É—â–µ–º?',
    difficulty: 'medium'
  }
];

const dareActions: TruthOrDareItem[] = [
  {
    id: 'dare_1',
    type: 'dare',
    text: '–û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –ø–æ—ë—à—å –µ–≥–æ –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é',
    difficulty: 'medium'
  },
  {
    id: 'dare_2',
    type: 'dare',
    text: '–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å —Å–∞–º—ã–º –∑–∞–±–∞–≤–Ω—ã–º –ª–∏—Ü–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä—É',
    difficulty: 'easy'
  },
  {
    id: 'dare_3',
    type: 'dare',
    text: '–ù–∞–ø–∏—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç—Ä–æ–∫ –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
    difficulty: 'hard'
  },
  {
    id: 'dare_4',
    type: 'dare',
    text: '–ó–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ, –≥–¥–µ —Ç–∞–Ω—Ü—É–µ—à—å –ø–æ–¥ –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (30 —Å–µ–∫—É–Ω–¥)',
    difficulty: 'medium'
  },
  {
    id: 'dare_5',
    type: 'dare',
    text: '–û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä—É –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ',
    difficulty: 'easy'
  }
];

export default function TruthOrDare({ sessionId, onComplete }: TruthOrDareProps) {
  const [gameState, setGameState] = useState<'selection' | 'question' | 'completed'>('selection');
  const [currentItem, setCurrentItem] = useState<TruthOrDareItem | null>(null);
  const [questionsAnswered, setQuestionsAnswered] = useState(0);
  const [isPartnerTurn, setIsPartnerTurn] = useState(false);

  const handleTypeSelection = (type: 'truth' | 'dare') => {
    telegramService.hapticFeedback('selection');
    
    const items = type === 'truth' ? truthQuestions : dareActions;
    const randomItem = items[Math.floor(Math.random() * items.length)];
    
    setCurrentItem(randomItem);
    setGameState('question');
  };

  const handleComplete = () => {
    if (!currentItem) return;

    telegramService.hapticFeedback('notification', 'success');
    
    const newCount = questionsAnswered + 1;
    setQuestionsAnswered(newCount);

    if (newCount >= 3) {
      // Game completed after 3 rounds
      setTimeout(() => {
        setGameState('completed');
        onComplete(newCount * 5, newCount * 5); // Both get same score for participation
      }, 1000);
    } else {
      // Continue with partner's turn or next round
      setIsPartnerTurn(!isPartnerTurn);
      setCurrentItem(null);
      setGameState('selection');
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'text-green-500 bg-green-500/20';
      case 'medium': return 'text-yellow-500 bg-yellow-500/20';
      case 'hard': return 'text-red-500 bg-red-500/20';
      default: return 'text-gray-500 bg-gray-500/20';
    }
  };

  const getDifficultyLabel = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '–õ–µ–≥–∫–æ';
      case 'medium': return '–°—Ä–µ–¥–Ω–µ';
      case 'hard': return '–°–ª–æ–∂–Ω–æ';
      default: return '–ù–æ—Ä–º–∞–ª—å–Ω–æ';
    }
  };

  if (gameState === 'completed') {
    return (
      <div className="p-4">
        <Card>
          <CardContent className="p-6 text-center">
            <div className="w-20 h-20 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <Users className="w-10 h-10 text-white" />
            </div>
            
            <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-100">
              –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
            </h2>
            
            <p className="text-lg text-gray-600 dark:text-gray-400 mb-6">
              –û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {questionsAnswered} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è. 
              –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ª—É—á—à–µ!
            </p>
            
            <div className="bg-purple-500/20 p-4 rounded-xl mb-6">
              <p className="font-semibold text-purple-600 dark:text-purple-400">
                üèÜ –ü–æ–ª—É—á–µ–Ω–æ {questionsAnswered * 5} —Å–µ—Ä–¥–µ—á–µ–∫ –∫–∞–∂–¥–æ–º—É!
              </p>
            </div>
            
            <div className="space-y-3">
              <Button 
                className="w-full bg-gradient-to-r from-primary to-secondary text-white"
                onClick={() => window.location.href = '/games'}
              >
                –ò–≥—Ä–∞—Ç—å –µ—â—ë
              </Button>
              <Button 
                variant="outline" 
                className="w-full"
                onClick={() => window.location.href = '/'}
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (gameState === 'question' && currentItem) {
    return (
      <div className="p-4">
        {/* Question Header */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  –†–∞—É–Ω–¥ {questionsAnswered + 1} –∏–∑ 3
                </span>
                <div className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(currentItem.difficulty)}`}>
                  {getDifficultyLabel(currentItem.difficulty)}
                </div>
              </div>
              <span className="text-sm text-gray-600 dark:text-gray-400">
                {isPartnerTurn ? '–•–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞' : '–í–∞—à —Ö–æ–¥'}
              </span>
            </div>
          </CardContent>
        </Card>

        {/* Question/Dare Card */}
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="text-center mb-4">
              <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${
                currentItem.type === 'truth' 
                  ? 'bg-blue-500/20 text-blue-600' 
                  : 'bg-purple-500/20 text-purple-600'
              }`}>
                {currentItem.type === 'truth' ? (
                  <MessageCircle className="w-8 h-8" />
                ) : (
                  <Zap className="w-8 h-8" />
                )}
              </div>
              
              <div className={`inline-block px-3 py-1 rounded-full text-sm font-medium mb-4 ${
                currentItem.type === 'truth'
                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300'
                  : 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300'
              }`}>
                {currentItem.type === 'truth' ? '–ü—Ä–∞–≤–¥–∞' : '–î–µ–π—Å—Ç–≤–∏–µ'}
              </div>
            </div>
            
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-6 text-center leading-relaxed">
              {currentItem.text}
            </h3>
            
            {currentItem.type === 'dare' && (
              <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 p-4 rounded-xl mb-4">
                <p className="text-sm text-amber-800 dark:text-amber-300">
                  üí° –°–æ–≤–µ—Ç: –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—É!
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Action Button */}
        <Card>
          <CardContent className="p-6 text-center">
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              {currentItem.type === 'truth' 
                ? '–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å?' 
                : '–í—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ?'
              }
            </p>
            <Button 
              onClick={handleComplete}
              className={`w-full font-semibold py-3 ${
                currentItem.type === 'truth'
                  ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white'
                  : 'bg-gradient-to-r from-purple-500 to-purple-600 text-white'
              }`}
            >
              {currentItem.type === 'truth' ? '–û—Ç–≤–µ—Ç–∏–ª(–∞)' : '–í—ã–ø–æ–ª–Ω–∏–ª(–∞)'}
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Selection screen
  return (
    <div className="p-4">
      {/* Game Header */}
      <Card className="mb-6">
        <CardContent className="p-6 text-center">
          <div className="w-16 h-16 bg-gradient-to-br from-purple-400/20 to-blue-400/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <Users className="w-8 h-8 text-purple-600" />
          </div>
          
          <h2 className="text-xl font-bold text-gray-800 dark:text-gray-100 mb-2">
            –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
          </h2>
          
          <p className="text-gray-600 dark:text-gray-400">
            {isPartnerTurn ? '–•–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞' : '–í–∞—à —Ö–æ–¥'} ‚Ä¢ –†–∞—É–Ω–¥ {questionsAnswered + 1} –∏–∑ 3
          </p>
        </CardContent>
      </Card>

      {/* Choice Cards */}
      <div className="space-y-4 mb-6">
        <Card 
          className="cursor-pointer hover:shadow-md transition-all duration-200 border-l-4 border-l-blue-500"
          onClick={() => handleTypeSelection('truth')}
        >
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center">
                <MessageCircle className="w-6 h-6 text-blue-600" />
              </div>
              <div className="flex-1">
                <h3 className="font-semibold text-gray-800 dark:text-gray-100">–ü—Ä–∞–≤–¥–∞</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Å—Ç–Ω–æ
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card 
          className="cursor-pointer hover:shadow-md transition-all duration-200 border-l-4 border-l-purple-500"
          onClick={() => handleTypeSelection('dare')}
        >
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center">
                <Zap className="w-6 h-6 text-purple-600" />
              </div>
              <div className="flex-1">
                <h3 className="font-semibold text-gray-800 dark:text-gray-100">–î–µ–π—Å—Ç–≤–∏–µ</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤–µ—Å–µ–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Instructions */}
      <Card className="bg-gray-50 dark:bg-gray-800/50">
        <CardContent className="p-4">
          <h4 className="font-semibold text-gray-800 dark:text-gray-100 mb-2">
            –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:
          </h4>
          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
            <li>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–∞–≤–¥–∞" –∏–ª–∏ "–î–µ–π—Å—Ç–≤–∏–µ"</li>
            <li>‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å</li>
            <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
            <li>‚Ä¢ –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ö–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä—É</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
