import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Camera, MessageCircle, Heart } from "lucide-react";
import { telegramService } from "@/lib/telegram";
import { DailyChallengeItem } from "@/types/models";

interface DailyChallengeProps {
  sessionId: number;
  onComplete: (userScore: number, partnerScore: number) => void;
}

const dailyChallenges: DailyChallengeItem[] = [
  {
    id: 'photo_together',
    title: '–°–µ–ª—Ñ–∏ –≤–º–µ—Å—Ç–µ',
    description: '–°–¥–µ–ª–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Å–µ–ª—Ñ–∏ –≤ –Ω–µ–æ–±—ã—á–Ω–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ —Å –∑–∞–±–∞–≤–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏',
    type: 'photo'
  },
  {
    id: 'compliment_exchange',
    title: '–û–±–º–µ–Ω –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞–º–∏',
    description: '–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –ø–æ 3 –∏—Å–∫—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞',
    type: 'text'
  },
  {
    id: 'surprise_action',
    title: '–ú–∏–Ω–∏-—Å—é—Ä–ø—Ä–∏–∑',
    description: '–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–¥–∞–∂–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π)',
    type: 'action'
  },
  {
    id: 'memory_share',
    title: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º',
    description: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ —Å–≤–æ—ë–º —Å–∞–º–æ–º —è—Ä–∫–æ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å –Ω–∏–º',
    type: 'text'
  },
  {
    id: 'future_dream',
    title: '–ú–µ—á—Ç–∞ –Ω–∞ –¥–≤–æ–∏—Ö',
    description: '–û–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –º–µ—á—Ç—É –∏–ª–∏ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤–º–µ—Å—Ç–µ',
    type: 'text'
  }
];

export default function DailyChallenge({ sessionId, onComplete }: DailyChallengeProps) {
  const [currentChallenge, setCurrentChallenge] = useState<DailyChallengeItem | null>(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  useEffect(() => {
    // Select daily challenge (in real app, this would be based on date)
    const today = new Date().getDate();
    const challengeIndex = today % dailyChallenges.length;
    setCurrentChallenge(dailyChallenges[challengeIndex]);
  }, []);

  const handleComplete = () => {
    if (!currentChallenge) return;

    telegramService.hapticFeedback('notification', 'success');
    setIsSubmitted(true);

    // Simulate completion
    setTimeout(() => {
      setIsCompleted(true);
      onComplete(10, 10); // Both get same score for participation
    }, 2000);
  };

  const getIcon = (type: string) => {
    switch (type) {
      case 'photo': return Camera;
      case 'text': return MessageCircle;
      case 'action': return Heart;
      default: return Heart;
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'photo': return '–§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ';
      case 'text': return '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
      case 'action': return '–î–µ–π—Å—Ç–≤–∏–µ';
      default: return '–ó–∞–¥–∞–Ω–∏–µ';
    }
  };

  const getInstructions = (type: string) => {
    switch (type) {
      case 'photo':
        return '–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º —á–µ—Ä–µ–∑ Telegram';
      case 'text':
        return '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
      case 'action':
        return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ';
      default:
        return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º';
    }
  };

  if (!currentChallenge) {
    return (
      <div className="p-4 flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (isCompleted) {
    return (
      <div className="p-4">
        <Card>
          <CardContent className="p-6 text-center">
            <div className="w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-3xl">‚úÖ</span>
            </div>
            
            <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-100">
              –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!
            </h2>
            
            <p className="text-lg text-gray-600 dark:text-gray-400 mb-6">
              –û—Ç–ª–∏—á–Ω–æ! –í—ã –æ–±–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –≠—Ç–æ —É–∫—Ä–µ–ø–ª—è–µ—Ç –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è!
            </p>
            
            <div className="bg-accent/20 p-4 rounded-xl mb-6">
              <p className="font-semibold text-accent">
                üèÜ –ü–æ–ª—É—á–µ–Ω–æ 10 —Å–µ—Ä–¥–µ—á–µ–∫ –∫–∞–∂–¥–æ–º—É!
              </p>
            </div>
            
            <div className="space-y-3">
              <Button 
                className="w-full bg-gradient-to-r from-primary to-secondary text-white"
                onClick={() => window.location.href = '/games'}
              >
                –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã
              </Button>
              <Button 
                variant="outline" 
                className="w-full"
                onClick={() => window.location.href = '/'}
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  const IconComponent = getIcon(currentChallenge.type);

  return (
    <div className="p-4">
      {/* Challenge Header */}
      <Card className="mb-6">
        <CardContent className="p-6 text-center">
          <div className="w-16 h-16 bg-gradient-to-br from-green-400/20 to-green-600/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <IconComponent className="w-8 h-8 text-green-600" />
          </div>
          
          <div className="inline-block bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 px-3 py-1 rounded-full text-sm font-medium mb-3">
            {getTypeLabel(currentChallenge.type)}
          </div>
          
          <h2 className="text-xl font-bold text-gray-800 dark:text-gray-100 mb-2">
            –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è
          </h2>
          
          <p className="text-gray-600 dark:text-gray-400">
            –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º
          </p>
        </CardContent>
      </Card>

      {/* Challenge Details */}
      <Card className="mb-6">
        <CardContent className="p-6">
          <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-3">
            {currentChallenge.title}
          </h3>
          
          <p className="text-gray-600 dark:text-gray-400 mb-6 leading-relaxed">
            {currentChallenge.description}
          </p>
          
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 p-4 rounded-xl">
            <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
              –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:
            </h4>
            <p className="text-sm text-blue-700 dark:text-blue-300">
              {getInstructions(currentChallenge.type)}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Action Button */}
      <Card>
        <CardContent className="p-6">
          {isSubmitted ? (
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-gray-600 dark:text-gray-400">
                –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞...
              </p>
            </div>
          ) : (
            <div className="text-center">
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                –í—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
              </p>
              <Button 
                onClick={handleComplete}
                className="w-full bg-gradient-to-r from-green-500 to-green-600 text-white font-semibold py-3"
              >
                –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
