import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Bot, CheckCircle, XCircle, Copy, ExternalLink } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { useQuery } from '@tanstack/react-query';

interface BotInfo {
  id: number;
  is_bot: boolean;
  first_name: string;
  username: string;
  can_join_groups: boolean;
  can_read_all_group_messages: boolean;
  supports_inline_queries: boolean;
}

export default function BotSettings() {
  const { toast } = useToast();
  const [webAppUrl, setWebAppUrl] = useState('');

  const { data: botInfo, isLoading, error, refetch } = useQuery<BotInfo>({
    queryKey: ['/api/bot/info'],
    queryFn: () => apiRequest('/api/bot/info'),
    retry: false
  });

  const { data: webAppUrlData } = useQuery<{ url: string }>({
    queryKey: ['/api/bot/webapp-url'],
    queryFn: () => apiRequest('/api/bot/webapp-url')
  });

  useEffect(() => {
    if (webAppUrlData?.url) {
      setWebAppUrl(webAppUrlData.url);
    }
  }, [webAppUrlData]);

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
      description: `${label} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`,
    });
  };

  const openBotFather = () => {
    window.open('https://t.me/BotFather', '_blank');
  };

  const testBot = async () => {
    try {
      await refetch();
      toast({
        title: "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!",
        description: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-2xl mx-auto space-y-6">
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center gap-2">
            <Bot className="h-8 w-8 text-primary" />
            <h1 className="text-2xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</h1>
          </div>
          <p className="text-muted-foreground">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º DuoLove
          </p>
        </div>

        {/* Bot Status Card */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
              {botInfo ? (
                <Badge variant="default" className="bg-green-500">
                  <CheckCircle className="h-3 w-3 mr-1" />
                  –ü–æ–¥–∫–ª—é—á–µ–Ω
                </Badge>
              ) : error ? (
                <Badge variant="destructive">
                  <XCircle className="h-3 w-3 mr-1" />
                  –û—à–∏–±–∫–∞
                </Badge>
              ) : (
                <Badge variant="secondary">
                  –ü—Ä–æ–≤–µ—Ä–∫–∞...
                </Badge>
              )}
            </CardTitle>
            <CardDescription>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º Telegram –±–æ—Ç–µ
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {isLoading && (
              <div className="text-center py-4">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                <p className="mt-2 text-sm text-muted-foreground">–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</p>
              </div>
            )}

            {error && (
              <div className="text-center py-4 space-y-2">
                <XCircle className="h-12 w-12 text-destructive mx-auto" />
                <p className="text-destructive">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É</p>
                <p className="text-sm text-muted-foreground">
                  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
                </p>
                <Button onClick={testBot} variant="outline" size="sm">
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
              </div>
            )}

            {botInfo && (
              <div className="space-y-3">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium">–ò–º—è:</span>
                    <p className="text-muted-foreground">{botInfo.first_name}</p>
                  </div>
                  <div>
                    <span className="font-medium">Username:</span>
                    <p className="text-muted-foreground">@{botInfo.username}</p>
                  </div>
                  <div>
                    <span className="font-medium">ID:</span>
                    <p className="text-muted-foreground">{botInfo.id}</p>
                  </div>
                  <div>
                    <span className="font-medium">–°—Ç–∞—Ç—É—Å:</span>
                    <p className="text-muted-foreground">
                      {botInfo.is_bot ? '–ë–æ—Ç' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                    </p>
                  </div>
                </div>

                <Separator />

                <div className="space-y-2">
                  <span className="font-medium text-sm">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</span>
                  <div className="flex flex-wrap gap-2">
                    <Badge variant={botInfo.can_join_groups ? "default" : "secondary"}>
                      –ì—Ä—É–ø–ø—ã: {botInfo.can_join_groups ? "–î–∞" : "–ù–µ—Ç"}
                    </Badge>
                    <Badge variant={botInfo.supports_inline_queries ? "default" : "secondary"}>
                      Inline: {botInfo.supports_inline_queries ? "–î–∞" : "–ù–µ—Ç"}
                    </Badge>
                  </div>
                </div>
              </div>
            )}

            <div className="flex gap-2">
              <Button onClick={testBot} variant="outline" size="sm" className="flex-1">
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
              </Button>
              <Button onClick={openBotFather} variant="outline" size="sm" className="flex-1">
                <ExternalLink className="h-4 w-4 mr-1" />
                BotFather
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* WebApp Settings Card */}
        <Card>
          <CardHeader>
            <CardTitle>WebApp –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</CardTitle>
            <CardDescription>
              URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp –≤ BotFather
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {webAppUrl && (
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <span className="font-medium text-sm">WebApp URL:</span>
                  <Button
                    onClick={() => copyToClipboard(webAppUrl, 'WebApp URL')}
                    variant="ghost"
                    size="sm"
                  >
                    <Copy className="h-3 w-3" />
                  </Button>
                </div>
                <div className="p-3 bg-muted rounded-md text-sm font-mono break-all">
                  {webAppUrl}
                </div>
              </div>
            )}

            <div className="bg-blue-50 dark:bg-blue-950 p-4 rounded-lg space-y-2">
              <h4 className="font-medium text-sm">–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WebApp:</h4>
              <ol className="text-sm text-muted-foreground space-y-1 list-decimal list-inside">
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather –≤ Telegram</li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /mybots</li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "Bot Settings" ‚Üí "Menu Button" ‚Üí "Configure Menu Button"</li>
                <li>–í—Å—Ç–∞–≤—å—Ç–µ WebApp URL —Å–≤–µ—Ä—Ö—É</li>
                <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "üéÆ –ò–≥—Ä–∞—Ç—å"</li>
              </ol>
            </div>
          </CardContent>
        </Card>

        {/* Quick Actions Card */}
        <Card>
          <CardHeader>
            <CardTitle>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
            <CardDescription>
              –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-1 gap-2">
              <Button
                onClick={() => window.open(`https://t.me/${botInfo?.username || 'duolove_bot'}`, '_blank')}
                variant="outline" 
                className="justify-start"
                disabled={!botInfo}
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram
              </Button>
              
              <Button
                onClick={() => copyToClipboard(`https://t.me/${botInfo?.username || 'duolove_bot'}`, '–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞')}
                variant="outline" 
                className="justify-start"
                disabled={!botInfo}
              >
                <Copy className="h-4 w-4 mr-2" />
                –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}