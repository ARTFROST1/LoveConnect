import TelegramBot from 'node-telegram-bot-api';

class DuoLoveTelegramBot {
  private bot: TelegramBot | null = null;
  private webAppUrl: string;
  private isDevelopment: boolean;

  constructor() {
    this.isDevelopment = process.env.NODE_ENV === 'development';
    // Use the new working Replit dev URL
    this.webAppUrl = process.env.WEBAPP_URL || 
      'https://bec6c78b-06ef-4930-9a8b-998a96781359-00-25nm89kud5pzr.picard.replit.dev';
    
    console.log('Telegram Bot: Initializing...');
    console.log('Environment:', this.isDevelopment ? 'development' : 'production');
    console.log('WebApp URL:', this.webAppUrl);
    console.log('Full WebApp URL for BotFather:', this.webAppUrl);
    
    // Initialize bot if we have a token
    this.initializeBot();
  }

  private initializeBot() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!token) {
      if (this.isDevelopment) {
        console.log('Telegram Bot: Running in development mode (no real bot required)');
        return;
      }
      console.error('TELEGRAM_BOT_TOKEN is not set');
      return;
    }

    try {
      this.bot = new TelegramBot(token, { 
        polling: true,
        baseApiUrl: 'https://api.telegram.org'
      });
      this.setupCommands();
      console.log('Telegram Bot initialized successfully');
    } catch (error) {
      console.error('Failed to initialize Telegram Bot:', error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    // Handle /start command - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    this.bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
      const chatId = msg.chat.id;
      const user = msg.from;
      const startParam = match?.[1];

      console.log('Received /start command:', {
        chatId,
        userId: user?.id,
        username: user?.username,
        startParam
      });

      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      await this.handleRegularStart(chatId, user);
    });

    // Handle errors
    this.bot.on('error', (error) => {
      console.error('Telegram Bot error:', error);
    });

    // Handle polling errors
    this.bot.on('polling_error', (error) => {
      console.error('Telegram Bot polling error:', error);
    });
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ handleInviteLink - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

  private async handleRegularStart(chatId: number, user: any) {
    if (!this.bot) return;

    try {
      const webAppUrl = this.webAppUrl;
      
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å DuoLove',
            web_app: { url: webAppUrl }
          }
        ]]
      };

      await this.bot.sendMessage(chatId, 
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DuoLove!\n\n` +
        `üéÆ –ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º\n` +
        `üíù –£–∫—Ä–µ–ø–ª—è–π—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–≥—Ä—ã\n` +
        `üèÜ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`,
        {
          reply_markup: keyboard,
          parse_mode: 'HTML'
        }
      );

    } catch (error) {
      console.error('Error handling regular start:', error);
      await this.bot.sendMessage(chatId, 
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  // Method to set webhook (for production)
  async setWebhook(webhookUrl: string) {
    if (!this.bot) {
      console.error('Bot is not initialized');
      return false;
    }

    try {
      await this.bot.setWebHook(webhookUrl);
      console.log('Webhook set successfully:', webhookUrl);
      return true;
    } catch (error) {
      console.error('Failed to set webhook:', error);
      return false;
    }
  }

  // Method to delete webhook (for development with polling)
  async deleteWebhook() {
    if (!this.bot) {
      console.error('Bot is not initialized');
      return false;
    }

    try {
      await this.bot.deleteWebHook();
      console.log('Webhook deleted successfully');
      return true;
    } catch (error) {
      console.error('Failed to delete webhook:', error);
      return false;
    }
  }

  // Get bot info
  async getBotInfo() {
    if (!this.bot) {
      return null;
    }

    try {
      const me = await this.bot.getMe();
      return me;
    } catch (error) {
      console.error('Failed to get bot info:', error);
      return null;
    }
  }

  // Method to generate referral link using proper Telegram WebApp format
  async generateReferralLink(userId: string): Promise<string> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é Telegram WebApp —Å—Å—ã–ª–∫—É
      const referralCode = `ref_${userId}_${Date.now().toString(36)}`;
      return `https://t.me/duolove_bot/DuoLove?startapp=${referralCode}`;
    } catch (error) {
      console.error('Error generating referral link:', error);
      // Fallback
      const referralCode = `ref_${userId}_${Date.now().toString(36)}`;
      return `https://t.me/duolove_bot/DuoLove?startapp=${referralCode}`;
    }
  }

  // Method to notify partner connection
  async notifyPartnerConnection(inviterUserId: string, inviteeUserId: string, inviteeName: string): Promise<void> {
    if (!this.bot) {
      if (this.isDevelopment) {
        console.log(`[DEV] Would notify user ${inviterUserId} that ${inviteeName} (${inviteeUserId}) connected`);
        return;
      }
      console.error('Bot is not initialized');
      return;
    }

    try {
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å DuoLove',
            web_app: { url: this.webAppUrl }
          }
        ]]
      };

      await this.bot.sendMessage(parseInt(inviterUserId), 
        `üéâ –ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
        `${inviteeName} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å!\n\n` +
        `–û—Ç–∫—Ä–æ–π—Ç–µ DuoLove, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤–º–µ—Å—Ç–µ.`,
        {
          reply_markup: keyboard,
          parse_mode: 'HTML'
        }
      );

      console.log(`Partner connection notification sent to user ${inviterUserId}`);
    } catch (error) {
      console.error('Error sending partner connection notification:', error);
    }
  }

  // Method to notify partner disconnection
  async notifyPartnerDisconnection(userId: string, partnerId: string): Promise<void> {
    if (!this.bot) {
      if (this.isDevelopment) {
        console.log(`[DEV] Would notify user ${partnerId} that ${userId} disconnected`);
        return;
      }
      console.error('Bot is not initialized');
      return;
    }

    try {
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å DuoLove',
            web_app: { url: this.webAppUrl }
          }
        ]]
      };

      await this.bot.sendMessage(parseInt(partnerId), 
        `üíî –ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n` +
        `–í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–≤—è–∑—å –≤ DuoLove.\n\n` +
        `–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å.`,
        {
          reply_markup: keyboard,
          parse_mode: 'HTML'
        }
      );

      console.log(`Partner disconnection notification sent to user ${partnerId}`);
    } catch (error) {
      console.error('Error sending partner disconnection notification:', error);
    }
  }
}

export const telegramBot = new DuoLoveTelegramBot();